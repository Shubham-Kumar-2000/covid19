#!/usr/bin/env node

/**
 * Module dependencies.
 */


const schedule=require('node-schedule');
var debug = require('debug')('covid19-informer:server');
var http = require('http');
require('dotenv').config({path: '.env'});
require('../Models/index').connect()
let Utills=require('../helpers/utils');

/**
 * Get port from environment and store in Express.
 */
if(process.env.CLUSTER === 'yes') {

	const cluster = require('cluster');
	const numCPUs = require('os').cpus().length;

	if (cluster.isMaster) {
    /*
    
    
    
    
    
    *****************************************************************************
                              Removing all cron jobs
    *****************************************************************************



    */
	  console.log('Starting app in cluster mode with '+numCPUs+ ' workers');
    console.log(`Master ${process.pid} is running`);
    let indiaUpdate=schedule.scheduleJob('0 0 * * *',async function(){
      try{
        await Utills.updateIndia()
      }catch(e){
        console.log(e)
      }
    })
		// Fork workers.
		for (let i = 0; i < numCPUs; i++) {
			cluster.fork();
		}

		cluster.on('exit', (worker, code, signal) => {
			console.log(`worker ${worker.process.pid} died`);
	  });

		return;
	}
  // else it's a worker. continue.
	console.log(`Worker ${process.pid} started`);

}
else {
  console.log('Starting app in non-cluster mode. (To start in cluster mode, pass CLUSTER=yes in config file)');
}


/**
 * Create HTTP server.
 */
var app = require('../app');
var server = http.createServer(app);

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);
/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
       console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
    console.log('Listening on ' + bind);
}
